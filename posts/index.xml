<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 无限灰</title>
    <link>https://arutoriacode.github.io/posts/</link>
    <description>Recent content in Posts on 无限灰</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 10 Sep 2023 22:45:15 +0800</lastBuildDate><atom:link href="https://arutoriacode.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CocosCreator3.x打包后嵌入到uniapp</title>
      <link>https://arutoriacode.github.io/posts/cocoscreator3.x%E6%89%93%E5%8C%85%E5%90%8E%E5%B5%8C%E5%85%A5%E5%88%B0uniapp/</link>
      <pubDate>Sun, 10 Sep 2023 22:45:15 +0800</pubDate>
      
      <guid>https://arutoriacode.github.io/posts/cocoscreator3.x%E6%89%93%E5%8C%85%E5%90%8E%E5%B5%8C%E5%85%A5%E5%88%B0uniapp/</guid>
      <description>首先Cocos本身就支持跨平台，可以打包成APP，但由于项目中游戏只是APP的一部分，还有其他界面要开发，用游戏引擎来写APP的一些交互逻辑页面确实不太合适，所以在技术选型上又选择uniapp。
uniapp的web-view是可以嵌入在线的地址和本地的html页面，但嵌入本地的html仅支持APP端，如果你开发需要兼容多端，那么直接使用在线地址的形式嵌入即可，下面的内容也不必阅读了。
需求上因为只需要支持APP端即可，并且使用在线地址嵌入在等待游戏加载的时间有点久，所以我选用了将游戏打包成h5并以本地html页面嵌入到uniapp形式，可以省去了请求游戏引擎js等文件的所需要消耗的时间。
但在嵌入发生一些意外，游戏页面加载时会报 file 协议跨域，从而加载游戏失败，在Cocos论坛找到了解决方案：
在游戏项目的构建模板中修改 fetch 函数：
(构建模板在游戏引擎编辑器左上角菜单栏-项目-创建项目构建模板（选择对应的构建平台）-web手机端即可创建)
function fetchLocal(url) { return new Promise(function (resolve, reject) { var xhr = new XMLHttpRequest(); xhr.onload = function () { resolve( new Response(xhr.response, { status: 200 }) ); }; xhr.onerror = function () { reject(new TypeError(&amp;#34;Local request failed&amp;#34;)); }; xhr.open(&amp;#34;GET&amp;#34;, url); xhr.responseType = &amp;#34;arraybuffer&amp;#34;; xhr.send(null); }); } window.fetch = fetchLocal; 如果你的游戏需要使用到 fetch 来进行网络请求，你可以额外使用 window 全局属性来替代原来的 fetch：
// 在window.fetch被修改为fetchLocal之前赋值 window.fetchRemote = window.fetch; function fetchLocal(url) { .</description>
    </item>
    
    <item>
      <title>CocosCreator游戏引擎问题归集</title>
      <link>https://arutoriacode.github.io/posts/cocoscreator%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E9%97%AE%E9%A2%98%E5%BD%92%E9%9B%86/</link>
      <pubDate>Wed, 02 Aug 2023 21:27:10 +0800</pubDate>
      
      <guid>https://arutoriacode.github.io/posts/cocoscreator%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E9%97%AE%E9%A2%98%E5%BD%92%E9%9B%86/</guid>
      <description>最近在使用Cocos creator游戏引擎仿做一款2D游戏，第一次开发游戏，同时也是第一次使用这个游戏引擎，只能一边看文档一边做。
将Node节点缩放后无法触发触摸事件的问题 这个问题困扰我有两天之久，在这之前的解决方案是触摸前记录一下旧的缩放比例，在触摸结束后再还原这个比例。
const oldScale = node.scale.clone() 但还是一直在思考这个问题，如果是缩小导致手指无法触摸还好说，关键是我是放大比例，这就让我很困扰。
首先来看下我的缩放操作
// 显示放大比例，原比例是 0.8, 0.8 node.setScale(0.98, 0.98) // 然后进行缓动动画 tween(node) .to( 0.2, { position: endPos }, { onUpdate: (t, radio) =&amp;gt; { node.position = toBezier(radio, startPos, midPos, endPos); } } ) .to(0.2, { scale: new Vec3(0.8, 0.8) }) .start(); 一旦缓动动画结束后，如果不进行还原比例就无法触摸移动了；导致这个问题原因是：
在实例化 Vec3 时未传递 Z 轴：
new Vec3(0.8, 0.8, 1) // 一定要传递第三个参数：Z轴 思考了两天我都想不到一个2D游戏的Z轴还能影响到触摸，这也是我写2D游戏未考虑的，觉得Z轴在2D项目用不上，干脆不传，同时也想着他引擎内部是不是会内部补齐。
游戏页面嵌入到uni-app的web-view组件加载远程图片却黑屏的问题 其实这个问题不知道归到uniapp还是cocos里，由于游戏正式发布是只有APP端的，但为了调试方便，同时写了H5（调试查看大体布局用）和APP的两个端；
而我的需求是在游戏加载过程中展示一个页面级的加载进度，也就是要覆盖在web-view，而在APP端由于web-view原生组件无法被其他组件覆盖，所以使用了uniapp官方提供的subnvue写法，这个没啥问题，关键在于h5端我就没准备写一个绝对定位浮动的加载页面，直接简单粗暴的给web-view加上个v-show，毕竟uniapp官方只是说App端不能用v-show而是用v-if；
当我对接接口，将远程图片加载回来，一切都没问题，在修改完cocos的代码触发热更新后，在uniapp的h5预览页面也能顺利的显示出图片，当我再次刷新整个浏览器页面时问题就出现了，图片在开发者工具的网络面板是正常请求到并且能预览到的，但是嵌入的cocos页面就是黑屏（背景图没有加载显示出来就是黑屏），cocos页面的开发工具和帧数都是能显示出来的：
起初我以为是跨域问题，但当前浏览器本身就已经被我突破了跨域限制了，不然也请求不到图片了；而当我尝试在cocos代码加上debugger调试时，保存后触发热更新它又成功显示出页面了，这就非常离谱了，关键没有任何报错信息（我忽略了警告级别的log），然后就是各种尝试，是不是加载回来的图片转为精灵贴图的代码出了问题，又debugger对比未加载出来和热更新加载出来时的object对象，检查了对象的属性：是否可用，是否启用等；
最终耗费了一段时间才在控制台发现了这一段警告日志提示：
WebGL: INVALID_VALUE: texSubImage2D: no canvas no canvas 的意思是找不到 canvas ?</description>
    </item>
    
    <item>
      <title> uni-app问题归集</title>
      <link>https://arutoriacode.github.io/posts/uni-app-%E8%B0%83%E8%AF%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 06 Jul 2023 19:31:46 +0800</pubDate>
      
      <guid>https://arutoriacode.github.io/posts/uni-app-%E8%B0%83%E8%AF%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>主要记录学习uni-app跨端遇到的问题和解决方案
问题：样式未能覆盖（跨端） 在微信小程序端可能与H5、APP的样式不一致，样式并没有被覆盖
解决方案：
方案一：如果样式是调整上下外边距的可以使用 进行包裹，然后定义该 的样式即可
方案二：使用 ::v-deep 进行穿透，微信小程序还需要设置 options.styleIsolation 选项：
&amp;lt;template&amp;gt; &amp;lt;view class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;custom-componet&amp;gt;&amp;lt;/custom-componet&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { options: { styleIsolation: &amp;#39;shared&amp;#39; // 微信小程序端一定要配置该项 } } &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; /** 微信小程序还要求::v-deep前面必须还要有父元素的类名存在 **/ .container ::v-deep .custom-component-class-name { /* 覆盖 custom-component 的样式 */ } &amp;lt;/style&amp;gt; 问题：小程序主包太大无法预览和发布、真机调试 微信小程序预览和发布的主包大小是有限制的，最大 4MB ，超过后是无法真机调试的查看效果的
解决方案：
将 HBuilderX 一 运行 一 运行到小程序模拟器 一 运行时是否压缩代码 勾选上，如果依旧超过限制无法真机调试，请注意静态文件是否有过大的文件，哪怕你在代码中不导入使用也会算进主包大小内，将不用的静态文件从打包运行时的目录（如：unpackage\dist\dev\mp-weixin）中删除即可；
正确的调试方法应该将一些图片资源转为线上，比如上传至图床或让后端返回URL链接。
问题：手机真机调试APP端，误操作未对USB设备授权，导致无法真机运行 解决方案：
USB重插手机，如还未弹出提示，先尝试从电脑中拔出，然后使用充电头充会电再重插，如还未提示可尝试重启电脑。
问题：自定义导航栏多端适配的问题 &amp;lt;template&amp;gt; &amp;lt;view class=&amp;#34;page-index-nav-bar flex-row justify-between&amp;#34; :style=&amp;#34;navigatorBarStyle&amp;#34; &amp;gt; &amp;lt;view class=&amp;#34;flex-row align-center search-container&amp;#34; :style=&amp;#34;&amp;#39;height: &amp;#39; + navHeight + &amp;#39;px&amp;#39;&amp;#34; &amp;gt; &amp;lt;image class=&amp;#34;youping-icon&amp;#34; src=&amp;#34;.</description>
    </item>
    
    <item>
      <title>低代码表单设计器设计思路（一）</title>
      <link>https://arutoriacode.github.io/posts/%E4%BD%8E%E4%BB%A3%E7%A0%81%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%E4%B8%80/</link>
      <pubDate>Wed, 05 Jul 2023 22:32:46 +0800</pubDate>
      
      <guid>https://arutoriacode.github.io/posts/%E4%BD%8E%E4%BB%A3%E7%A0%81%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%E4%B8%80/</guid>
      <description>最近我写了一个低代码表单设计器，已经有一段时间了，现在想总结一下这个过程。
需求原型 接下来将按照原型草稿逐步实现并填充细节上去
拖拽功能 拖拽有一个现成的库让我们可以快速实现功能：Sortable.js
这还有一个基于它写的vue版本：vuedraggable
使用vuedraggable大大方便我们开发实现由左侧面板组件栏拖拽到可视化编辑区域的功能
vuedraggable的基础用法可以查看 Github，这里就不过多赘述了。
从一个可拖拽列表拖拽到另一个可拖拽列表这种没什么大问题，参照官方给出的示例就可以轻松实现，主要是要计算拖拽后组件的位置，拖拽后的组件需要记录它自身在哪个位置、哪个容器组件下，这事关乎一些功能的实现，比如复制组件的功能。
当一个字段组件在某个父容器组件内，而这个父容器组件可能也在某个容器组件内，在点击字段组件的复制按钮时，如果不知道字段组件所处的位置信息，那么复制后的组件就只能在最顶层显示出来，如图：
其实用复制功能来举例子并不恰当，因为我们可以规定点击复制就复制到顶层，用户复制完毕后自己再拖拽到原来的容器位置也是可以的。
那么就用组件的上移、下移以及删除功能来说：
当点击删除时，如果不能清除组件所在的位置信息，那么我们需要在多层级的对象结构中递归循环找到这个组件JSON对象的数据，在可能有数据量大多层嵌套的情况下，这种查找操作是很消耗性能的。
同样在上移、下移时，上移的上方组件我们要拿到和当前的组件进行对换，这也是一种递归查找。
如何解决这种性能问题？ 既然需要知道位置信息，那么在渲染对象结构数据时带下去就可以了。
&amp;lt;template&amp;gt; &amp;lt;draggable v-bind=&amp;#34;$attrs&amp;#34; :list=&amp;#34;widget.childrenList&amp;#34; :handle=&amp;#34;handle&amp;#34; :move=&amp;#34;checkMove&amp;#34; :clone=&amp;#34;clone&amp;#34; :group=&amp;#34;group&amp;#34; :ghostClass=&amp;#34;ghostClass&amp;#34; :animation=&amp;#34;animation&amp;#34; :component-data=&amp;#34;{ name: widget.nameAlias || widget.name }&amp;#34; :item-key=&amp;#34;itemKey&amp;#34; :disabled=&amp;#34;isViewStatus&amp;#34; @end=&amp;#34;onEndMove&amp;#34; &amp;gt; &amp;lt;template #item=&amp;#34;scope&amp;#34;&amp;gt; &amp;lt;div :id=&amp;#34;scope.element.id&amp;#34;&amp;gt; &amp;lt;!-- 在这里我们就将父组件位置信息列表的和当前组件的索引组合传递下去 --&amp;gt; &amp;lt;!-- 比如这样 [0,0,2,3,1] --&amp;gt; &amp;lt;slot v-bind=&amp;#34;{ element: { ...scope.element, path: [...widget.path, scope.index] }, index: scope.index }&amp;#34; &amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/draggable&amp;gt; &amp;lt;/template&amp;gt; 最终整个 渲染数据结构 是这样的：
{ id: &amp;#39;2ee7bfed-f7df-45b2-9664-a5fc6acfc15e&amp;#39;, name: &amp;#34;a-form&amp;#34;, childrenList: [ { id: &amp;#39;33213ac6-cb05-4b7c-8e4b-fd47aff23a4d&amp;#39;, name: &amp;#39;a-card&amp;#39;, childrenList: [ { id: &amp;#39;ec8ba4dc-9b3e-4f9c-bd29-ef5597a3f631&amp;#39;, name: &amp;#39;text&amp;#39;, // 这里是拼接父组件的位置信息和当前组件的位置信息 path: [&amp;#39;root&amp;#39;, 0, 0], type: &amp;#39;field&amp;#39;, options: { .</description>
    </item>
    
    <item>
      <title>React Native快速刷新（FastRefresh）无法工作</title>
      <link>https://arutoriacode.github.io/posts/react-native%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B0fastrefresh%E6%97%A0%E6%B3%95%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Sat, 03 Jun 2023 09:07:44 +0800</pubDate>
      
      <guid>https://arutoriacode.github.io/posts/react-native%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B0fastrefresh%E6%97%A0%E6%B3%95%E5%B7%A5%E4%BD%9C/</guid>
      <description>在使用React Native开发过程中，可能会遇到一些奇怪的问题，比如快速刷新无法工作或者Axios可以发送请求但是无法进入回调函数。今天我来分享一下我遇到这些问题的解决方法。
问题1：快速刷新无法工作
首先，我们需要确认开发菜单是否开启了快速刷新功能。如果没有开启，可以通过以下步骤打开：
在模拟器或者真机上双击R键。 在开发菜单中选择“Enable Fast Refresh”。 如果开启了快速刷新功能但是仍然无法工作，那么可能是以下原因导致的：
Babel的配置问题。如果你安装了mobx并按照官网的要求配置了Babel，但是忽略了Babel的版本，就可能会导致快速刷新无法工作。Babel大于7.13.0的正确配置应该是： { &amp;#34;plugins&amp;#34;: [[&amp;#34;@babel/plugin-proposal-class-properties&amp;#34;]], &amp;#34;assumptions&amp;#34;: { &amp;#34;setPublicClassFields&amp;#34;: false } } 如果你是小于7.13.0，那么应该如下配置：
{ &amp;#34;plugins&amp;#34;: [[&amp;#34;@babel/plugin-proposal-class-properties&amp;#34;, { &amp;#34;loose&amp;#34;: false }]], } package.json中的resolutions配置项。如果你在package.json中添加了resolutions配置项，可能会导致快速刷新无法工作。可以尝试删除该配置项并重新安装依赖。 问题2：Axios可以发送请求但是无法进入回调函数
如果你遇到这个问题，可以先检查一下Axios的使用方法是否正确。正确的使用方法应该是这样的：
axios.get(&amp;#39;/api/user&amp;#39;) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); 如果使用方法没有问题，那么可能是以下原因导致的：
Babel的配置问题。和快速刷新无法工作的问题一样，Babel的配置也可能会导致Axios无法进入回调函数。请确保你的Babel配置正确。
tsconfig.json中的compilerOptions选项。如果你在tsconfig.json中添加了compilerOptions选项，并且覆盖了@tsconfig/react-native/tsconfig.json中的正确配置项，就可能会导致Axios无法进入回调函数。正确的compilerOptions应该是这样的：
{ &amp;#34;extends&amp;#34;: &amp;#34;@tsconfig/react-native/tsconfig.json&amp;#34;, &amp;#34;compilerOptions&amp;#34;: { &amp;#34;experimentalDecorators&amp;#34;: true } } 总结
在React Native开发过程中遇到问题是很正常的，但是只要认真排查，就一定能够找到解决方法。实在不行就使用排除法，先把依赖还原至简，逐个排查，总有收获！</description>
    </item>
    
    <item>
      <title>关于vuedraggable拖拽组件传递插槽，子组件无法拖拽的问题</title>
      <link>https://arutoriacode.github.io/posts/%E5%85%B3%E4%BA%8Evuedraggable%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%8F%92%E6%A7%BD%E5%AD%90%E7%BB%84%E4%BB%B6%E6%97%A0%E6%B3%95%E6%8B%96%E6%8B%BD%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 02 Mar 2023 09:49:36 +0800</pubDate>
      
      <guid>https://arutoriacode.github.io/posts/%E5%85%B3%E4%BA%8Evuedraggable%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%8F%92%E6%A7%BD%E5%AD%90%E7%BB%84%E4%BB%B6%E6%97%A0%E6%B3%95%E6%8B%96%E6%8B%BD%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>问题的产生 在开发elysia低代码表单设计器时遇到一个难受点： 每次开发一个容器组件时，都要传递一些固定的属性，如list、group、ghostClass、animation、item-key、component-data等属性。
示例：
&amp;lt;template&amp;gt; &amp;lt;static-wrapper :widget=&amp;#34;widget&amp;#34;&amp;gt; &amp;lt;a-card :title=&amp;#34;widget.options.title&amp;#34;&amp;gt; &amp;lt;!-- 主要看以下代码 --&amp;gt; &amp;lt;draggable :list=&amp;#34;widget.childrenList&amp;#34; handle=&amp;#34;.move-area&amp;#34; :move=&amp;#34;checkMove&amp;#34; :clone=&amp;#34;clone&amp;#34; group=&amp;#34;dragGroup&amp;#34; ghostClass=&amp;#34;ghost&amp;#34; :animation=&amp;#34;300&amp;#34; :component-data=&amp;#34;{ index: widget.path, type: widget.name }&amp;#34; item-key=&amp;#34;id&amp;#34; :disabled=&amp;#34;isViewStatus&amp;#34; @end=&amp;#34;onEndMove&amp;#34; &amp;gt; &amp;lt;template #item=&amp;#34;{ element }&amp;#34;&amp;gt; &amp;lt;component :is=&amp;#34;&amp;#39;elysia-&amp;#39; + element.name&amp;#34; :widget=&amp;#34;element&amp;#34; :key=&amp;#34;element.id&amp;#34; &amp;gt;&amp;lt;/component&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/draggable&amp;gt; &amp;lt;/a-card&amp;gt; &amp;lt;/static-wrapper&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script setup&amp;gt; // 省略一些模块导入 defineProps({ widget: { type: Object, required: true } }) const onEndMove = () =&amp;gt; { // 省略 } &amp;lt;/script&amp;gt; 每次开发一个新的容器组件都得这样写，虽说可以使用vscode的用户代码片段来快速生成，但还是尝试封装了一下组件。</description>
    </item>
    
    <item>
      <title>Vite动态导入svg用作vue图标</title>
      <link>https://arutoriacode.github.io/posts/vite%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5svg%E7%94%A8%E4%BD%9Cvue%E5%9B%BE%E6%A0%87/</link>
      <pubDate>Fri, 17 Feb 2023 10:27:26 +0800</pubDate>
      
      <guid>https://arutoriacode.github.io/posts/vite%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5svg%E7%94%A8%E4%BD%9Cvue%E5%9B%BE%E6%A0%87/</guid>
      <description>1、需要安装一个vite-svg-loader
npm i --save-dev vite-svg-loader 2、在vite.config.js中使用
import { defineConfig } from &amp;#39;vite&amp;#39; import vue from &amp;#39;@vitejs/plugin-vue&amp;#39; import svgLoader from &amp;#39;vite-svg-loader&amp;#39; // 导入 export default defineConfig({ plugins: [vue(), svgLoader()], // 使用 }) 3、动态导入svg文件，下面是用动态导入当前目录下的svg作为示例
import { defineComponent } from &amp;#34;vue&amp;#34;; export default { install(app) { const svgs = import.meta.glob(&amp;#34;./*.svg&amp;#34;, { eager: true }); // 导入当前目录下所有的svg文件 Object.keys(svgs).map(key =&amp;gt; { // key 为 ./svg-name.svg 路径的形式，需要做个替换 -&amp;gt; svg-name const name = key.replace(/\.\/(.*?)\.svg/, &amp;#34;$1&amp;#34;); const comp = defineComponent(svgs[key]); app.</description>
    </item>
    
    <item>
      <title>关于atob的使用问题</title>
      <link>https://arutoriacode.github.io/posts/%E5%85%B3%E4%BA%8Eatob%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 08 Feb 2023 11:12:27 +0800</pubDate>
      
      <guid>https://arutoriacode.github.io/posts/%E5%85%B3%E4%BA%8Eatob%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</guid>
      <description>window.atob() 使用是不需要 base64 的 data:image/png base64,前缀的。</description>
    </item>
    
  </channel>
</rss>
